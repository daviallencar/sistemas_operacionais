import threading
import time
import random

# N√∫mero de fil√≥sofos
NUM_FILOSOFOS = 5

# Cria√ß√£o de um garfo (lock) para cada fil√≥sofo
garfos = [threading.Lock() for _ in range(NUM_FILOSOFOS)]

# Lock adicional para organizar a impress√£o na tela
print_lock = threading.Lock()

def filosofo(id):
    id += 1  # Ajuste para ID humano (come√ßando em 1)

    # Definindo garfos √† esquerda e √† direita
    esquerda = garfos[(id - 1) % NUM_FILOSOFOS]
    direita = garfos[id % NUM_FILOSOFOS]

    # Estrat√©gia para evitar deadlock:
    # O fil√≥sofo 1 pega primeiro o garfo da direita
    if id == 1:
        primeiro, segundo = direita, esquerda
    else:
        primeiro, segundo = esquerda, direita

    while True:
        # Pensando
        with print_lock:
            print(f"[Fil√≥sofo {id}] üí≠ Est√° pensando...")
        time.sleep(random.uniform(0.5, 1.5))  # Tempo aleat√≥rio pensando

        # Tentando pegar os garfos
        with print_lock:
            print(f"[Fil√≥sofo {id}] ü•¢ Tentando pegar os garfos.")

        # Pega primeiro garfo
        with print_lock:
            print(f"[Fil√≥sofo {id}] ‚úã Esperando primeiro garfo...")
        primeiro.acquire()
        with print_lock:
            print(f"[Fil√≥sofo {id}] ‚úÖ Pegou o primeiro garfo.")

        # Pega segundo garfo
        with print_lock:
            print(f"[Fil√≥sofo {id}] ‚úã Esperando segundo garfo...")
        segundo.acquire()
        with print_lock:
            print(f"[Fil√≥sofo {id}] ‚úÖ Pegou o segundo garfo.")

        # Comendo
        with print_lock:
            print(f"[Fil√≥sofo {id}] üçù Est√° comendo!")
        time.sleep(random.uniform(0.5, 1.5))  # Tempo aleat√≥rio comendo

        # Devolvendo os garfos
        primeiro.release()
        segundo.release()
        with print_lock:
            print(f"[Fil√≥sofo {id}] üîÑ Devolveu os garfos.")

def jantar():
    # Cria e inicia uma thread para cada fil√≥sofo
    filosofos = []
    for i in range(NUM_FILOSOFOS):
        t = threading.Thread(target=filosofo, args=(i,))
        filosofos.append(t)
        t.start()

    # Mant√©m o programa rodando (n√£o encerramos as threads)
    for t in filosofos:
        t.join()

# Execu√ß√£o principal
if __name__ == "__main__":
    jantar()
